// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prompt {
  id              String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text            String
  name            String
  description     String?
  model           GPTModel         @default(GPT35)
  modelAnswer     String?
  promptVariables PromptVariable[]
  categories      Category[]
  user            User?            @relation("UserPrompts", fields: [userId], references: [id])
  userId          String?          @map("user_id") @db.Uuid
  teamId          String?          @map("team_id") @db.Uuid
  Team            Team?            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  opened          Boolean          @default(false)
  lang            String           @default("en")

  @@map("prompt")
}

model PromptVariable {
  id       String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  prompt   Prompt       @relation(fields: [promptId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  promptId String       @map("prompt_id") @db.Uuid
  value    String
  key      String?
  type     VariableType @default(text)

  @@map("prompt_variable")
}

enum VariableType {
  text
  longText
  pdf
  csv
}

model Category {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    String
  prompts Prompt[]

  @@map("category")
}

enum GPTModel {
  GPT35
  GPT4
}

model User {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email           String
  password        String
  firstname       String
  lastname        String
  prompts         Prompt[]          @relation("UserPrompts")
  subscription    Subscription?     @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String?           @db.Uuid
  WorkspaceMember WorkspaceMember[]
  TeamMember      TeamMember[]

  @@map("user")
}

model Workspace {
  id      String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    String
  members WorkspaceMember[]
  Team    Team[]

  @@map("workspace")
}

model Team {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  members     TeamMember[]
  workspaceId String       @map("workspace_id") @db.Uuid
  Workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  Prompt      Prompt[]

  @@map("team")
}

model TeamMember {
  id     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user   User     @relation(fields: [userId], references: [id])
  userId String   @map("user_id") @db.Uuid
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String   @map("team_id") @db.Uuid
  role   TeamRole @default(user)

  @@map("team_member")
}

enum TeamRole {
  user
  admin

  @@map("team_role")
}

model WorkspaceMember {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @map("user_id") @db.Uuid
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String        @map("workspace_id") @db.Uuid
  role        WorkspaceRole @default(user)

  @@map("workspace_member")
}

enum WorkspaceRole {
  user
  admin

  @@map("workspace_role")
}

model Subscription {
  id         String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type       SubscriptionType @default(trial)
  creditLeft Int              @default(20)
  User       User[]

  @@map("subscription")
}

enum SubscriptionType {
  trial
  paid
}
